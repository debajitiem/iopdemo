/*
 * Command line: gradle -Piib_env=QA|PROD|DEV Ant Target (e.g. deploy, compile, * test)
 * or place in gradle.properties file.
 * The deployOnly property can be set to 'true' if an existing BAR file
 * has to be deployed only; not first compiled.
 */

/* First set the mqsi environment paths and commands so that the Ant
 * build file can find the mqsi commands
 */

 if (org.gradle.internal.os.OperatingSystem.current().windows) {

       ant.properties['mqsi.deploy'] = 'mqsideploy.exe'
       ant.properties['mqsi.createbar'] = 'mqsicreatebar.exe'
       ant.properties['iib.path'] = ext.mqsiprofilePathWin

   } else {

       ant.properties['mqsi.deploy'] = 'mqsideploy'
       ant.properties['mqsi.createbar'] = 'mqsicreatebar'
       ant.properties['iib.path'] = ext.mqsiprofilePathUnix
}

switch (iib_env) {

         case "PROD":
          ant.properties['iib.node.specfile'] = 'iib-node-prod.xml'
          ant.properties['iib.override.file'] = 'override-prod.properties'
          break;
         case "QA":
          ant.properties['iib.node.specfile'] = 'iib-node-qa.xml'
          ant.properties['iib.override.file'] = 'override-qa.properties'
          break;
         default:
         ant.properties['iib.node.specfile'] = 'iib-node.xml'
         ant.properties['iib.override.file'] = 'override.properties'
}

ext.brokerFile = file('broker.properties')

ant.properties['deploy.only'] = ext.deployOnly

ant.importBuild 'build.xml'

task multiDeploy() {

  Properties brokers = readBrokers()

  doLast {

  String[] brokerElems

  def iNode, hostName, Port, iServer

  brokers.each{ key, value ->

    brokerElems = value.split(':')

    iNode = brokerElems[0]
    hostName = brokerElems[1]
    Port = brokerElems[2]
    iServer = brokerElems[3]

    ant.mdeploy(inode: iNode,
                hostname: hostName,
                port: Port,
                execgroup: iServer)
    }
  }
}

Properties readBrokers() {

 logger.quiet 'Reading the brokers file.'

 if (!ext.brokerFile.exists()) {
     throw new GradleException(
     "Required broker file does not exist: $brokerFile.canonicalPath")
 }
 Properties brokerProps = new Properties()
 brokerFile.withInputStream { stream -> brokerProps.load(stream) }
  return brokerProps
}
